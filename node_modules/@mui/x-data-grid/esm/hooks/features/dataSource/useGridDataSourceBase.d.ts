import { RefObject } from '@mui/x-internals/types';
import { GridDataSourceCache } from "../../../models/gridDataSource.js";
import { CacheChunkManager, DataSourceRowsUpdateStrategy } from "./utils.js";
import { type GridDataSourceCacheDefaultConfig } from "./cache.js";
import type { GridDataSourceApi } from './models';
import type { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';
import type { DataGridProcessedProps } from '../../../models/props/DataGridProps';
import type { GridStrategyProcessor } from '../../core/strategyProcessing';
import type { GridEventListener } from '../../../models/events';
import type { GridRowId } from '../../../models';
export declare const useGridDataSourceBase: <Api extends GridPrivateApiCommunity>(apiRef: RefObject<Api>, props: Pick<DataGridProcessedProps, "dataSource" | "dataSourceCache" | "onDataSourceError" | "pageSizeOptions" | "signature">, options?: {
  cacheOptions?: GridDataSourceCacheDefaultConfig;
  fetchRowChildren?: (parents: GridRowId[]) => void;
  clearDataSourceState?: () => void;
}) => {
  api: {
    public: GridDataSourceApi;
  };
  strategyProcessor: {
    strategyName: DataSourceRowsUpdateStrategy;
    group: "dataSourceRowsUpdate";
    processor: GridStrategyProcessor<"dataSourceRowsUpdate">;
  };
  setStrategyAvailability: () => void;
  cacheChunkManager: CacheChunkManager;
  cache: GridDataSourceCache;
  events: {
    strategyAvailabilityChange: GridEventListener<"strategyAvailabilityChange">;
    sortModelChange: (params: unknown) => void;
    filterModelChange: (params: unknown) => void;
    paginationModelChange: (params: unknown) => void;
  };
};