import {
  NativeBaseProvider,
  Box,
  Text,
  Button,
  Image,
  Heading,
  ScrollView,
  Select,
  CheckIcon,
  Checkbox,
  TextArea,
} from "native-base";
import React, { useEffect, useState } from "react";
import { Alert } from "react-native";

export default function addbservation() {
  // Usestate variables to hold all the form inputs 
  // User selects project_id from stored projects
  // User selects the type of format to write obsverations in
  const [projects, setProjects] = useState([]);
  const [selectedProjectId, setSelectedProjectId] = useState("");
  const [formatType, setFormatType] = useState("");

  // Each state variable here stores the data the student has written
  // For a specific format method that is dynamically rendered
  const [observationText, setObservationText] = useState("");
  const [checkboxOptions, setCheckboxOptions] = useState([]);
  const [observationDropdown, setObservationDropdown] = useState("");

  // Specific story prompts generated by the OpenAI endpoint and stored
  // Based on format selected
  const [story, setStory] = useState("");
  const [story2, setStory2] = useState([]);
  const [story3, setStory3] = useState([]);

  // Function to filter the list of projects returned to by the local backend endpoint
  // and checks whether the id selected matches the endpoint
  const selectedProject = projects.find(
    (project) => project.project_id.toString() === selectedProjectId
  );

  // 3 submit functions sending the obsveration data to the observation database
  // Based of format (text, dropdown, checkbox) selected
  const handleSubmit = async () => {
    try {
      const res = await fetch("http://192.168.68.104:5002/observations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          student_id: 2,
          project_id: Number(selectedProjectId),
          observation_data: { observationText },
        }), // send observation data
      });

      if (res.ok) {
        setObservationText(""); // clear input
        setStory("");
        Alert.alert("Success", "Your response has been submitted.");
      }
    } catch (error) {
      console.error(error);
    }
  };

  // For checkbox submissions
  const handleSubmit2 = async () => {
    try {
      const res = await fetch("http://192.168.68.104:5002/observations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          student_id: 2,
          project_id: Number(selectedProjectId),
          observation_data: { checkboxOptions },
        }), // send observation data
      });

      if (res.ok) {
        setCheckboxOptions([]); // clear input
        setStory2([]);
        Alert.alert("Success", "Your response has been submitted.");
      }
    } catch (error) {
      console.error(error);
    }
  };

  // For dropdown submissions
  const handleSubmit3 = async () => {
    try {
      const res = await fetch("http://192.168.68.104:5002/observations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          student_id: 2,
          project_id: Number(selectedProjectId),
          observation_data: { observationDropdown },
        }), // send observation data
      });

      if (res.ok) {
        setObservationDropdown([]); // clear input
        setStory3([]);
        Alert.alert("Success", "Your response has been submitted.");
      }
    } catch (error) {
      console.error(error);
    }
  };

  // Use effect triggered only once at the start of page render to retrieve projects
  useEffect(() => {
    fetch("http://192.168.68.104:5001/projects") // replace with your backend
      .then((response) => response.json())
      .then((data) => {
        setProjects(data);
      })
      .catch((error) => {
        console.error("Error fetching projects:", error);
      });
  }, []);

  // Async functions that fetch story based on the "content" prompt attributed entered
  // The user inputs their API-KEY and sends a fetch request to the given endpoint
  // Using the post method, sending data and authentication through API KEY
  // The body that you send contains the gpt-4o-mini model (smaller, faster GPT)
  // and then sends the content -> the prompt yopu give the model
  // This allows us to create very unique questions and prompts for EVERY different project
  async function fetchStory(description) {
    const OPENAI_API_KEY =
      "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";
    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENAI_API_KEY}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "user",
                content: `Generate student observation questions (should be different questions every time request is sent) for ${description} project; they must be simple enough for a child to understand`,
              },
            ],
          }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        setStory(data.choices[0].message.content);
        console.log(data);
      } else {
        setStory(`Error: ${data.error.message}`);
      }
    } catch (error) {
      setStory("Failed to fetch story.");
      console.error(error);
    }
  }

  async function fetchStory2(description) {
    const OPENAI_API_KEY =
      "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";
    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENAI_API_KEY}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "user",
                content: `Generate one student observation question (should be a different question and answers every tiome this request) for ${description} project and include a list of checkbox option answers for that question; they must be simple enough for a child to understand, Output ONLY the JavaScript array, do not incldue any explanation, introductory words or text, only the array literal, output it exactly like this example but think of a different question and answers {
  "question": "What do you think ladybugs do to help plants?",
  "options": [
    "Eat bad bugs",
    "Make plants grow",
    "Drink water from flowers",
    "Make friends with other insects"
  ]
} `,
              },
            ],
          }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        const parsedContent = JSON.parse(data.choices[0].message.content);
        console.log(parsedContent);
        setStory2(parsedContent);
      }
    } catch (error) {
      console.error(error);
    }
  }

  async function fetchStory3(description) {
    const OPENAI_API_KEY =
      "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";
    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENAI_API_KEY}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "user",
                content: `Generate dropdown menu options (should be a different question and answers every time this request) for ${description} project,they must be simple enough for a child to understand, Output ONLY the JavaScript array, do not incldue any explanation, introductory words or text, only the array literal, output it exactly like this example but think of a different question and answers example (do not use this this is an example) ["What do ladybugs eat?", "How do ladybugs protect plants?", "Where do ladybugs live?"]`,
              },
            ],
          }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        const parsedArray = JSON.parse(data.choices[0].message.content);
        setStory3(parsedArray);
      }
    } catch (error) {
      console.error(error);
    }
  }

  // Dynamic function to return and render specific forms based on option picked
  // For example, clicking on text in the dropdown selection returns the first 
  // conditional statement and so on...
  const renderInputByFormat = () => {
    if (formatType === "text") {
      return (
        <>
          <TextArea
            placeholder="Enter your observations"
            value={observationText}
            onChangeText={setObservationText}
            totalLines={7}
            mb={4}
          />
          <Button onPress={() => fetchStory(selectedProject.description)}>
            Click here to generate AI questions
          </Button>
          <Button onPress={handleSubmit}>Submit Observation</Button>
        </>
      );
    } else if (formatType === "checkbox") {
      return (
        <>
          {story2 && (
            <>
              <Text bold fontSize="lg" mb={4}>
                {story2.question}
              </Text>
              {story2.options &&
                story2.options.map((option, index) => (
                  <Checkbox
                    key={index}
                    value={option}
                    isChecked={checkboxOptions.includes(option)}
                    onChange={() => {
                      setCheckboxOptions((prev) =>
                        prev.includes(option)
                          ? prev.filter((item) => item !== option)
                          : [...prev, option]
                      );
                    }}
                  >
                    {option}
                  </Checkbox>
                ))}
            </>
          )}
          <Button onPress={() => fetchStory2(selectedProject.description)}>
            Click here to generate AI questions
          </Button>
          <Button onPress={handleSubmit2}>Submit Observation</Button>
        </>
      );
    } else if (formatType === "dropdown") {
      return (
        <>
          <Select
            selectedValue={observationDropdown}
            placeholder="Choose an option"
            onValueChange={setObservationDropdown}
            _selectedItem={{
              bg: "teal.600",
              endIcon: <CheckIcon size={5} />,
            }}
            mb={4}
          >
            {story3.map((option, index) => (
              <Select.Item key={index} label={option} value={option} />
            ))}
          </Select>

          <Button onPress={() => fetchStory3(selectedProject.description)}>
            Click here to generate AI dropdown options
          </Button>
          <Button onPress={handleSubmit3}>Submit Observation</Button>
        </>
      );
    } else {
      return (
        <Text color="gray.500" mb={4}>
          Please select a format type to enter observation.
        </Text>
      );
    }
  };

  return (
    <NativeBaseProvider>
      {/* 
          ScrollView allows scrolling of the entire component
        */}
      <ScrollView>
        <Box>
          <Box mb={6} width="100%">
            <Image
              source={{
                uri: "https://ssec.si.edu/sites/default/files/MOBILE%20APPS%20FOR%20CITIZEN%20SCIENCE%205_0.png",
              }}
              style={{ width: "100%", height: 300 }}
              resizeMode="contain"
            />
          </Box>
        </Box>

        <Box p={4}>
          <Heading mb={6} size="md">
            Add Observation for your Selected Project
          </Heading>

          <Select
            selectedValue={selectedProjectId}
            minWidth="200"
            placeholder="Choose Project"
            onValueChange={(value) => setSelectedProjectId(value)}
            _selectedItem={{
              bg: "teal.600",
              endIcon: <CheckIcon size="5" />,
            }}
            mb={4}
          >
            {projects.map((project) => (
              <Select.Item
                label={project.project_title}
                value={project.project_id.toString()}
                key={project.project_id}
              />
            ))}
          </Select>

          {selectedProject && (
            <Box>
              <Heading size="sm" mb={1}>
                Project Description
              </Heading>
              <Text mb={4}>{selectedProject.description}</Text>
            </Box>
          )}

          {/* Format Type Select */}
          <Select
            selectedValue={formatType}
            minWidth="200"
            placeholder="Select Observation Format"
            onValueChange={setFormatType}
            _selectedItem={{
              bg: "teal.600",
              endIcon: <CheckIcon size={5} />,
            }}
            mb={4}
          >
            <Select.Item label="Comments (Observations)" value="text" />
            <Select.Item label="Checkbox" value="checkbox" />
            <Select.Item label="Dropdown" value="dropdown" />
          </Select>

          {/* Dynamic Input Based on Format */}
          {renderInputByFormat()}

          {story}
        </Box>
      </ScrollView>
    </NativeBaseProvider>
  );
}
